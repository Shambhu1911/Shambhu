S7
Q1
<html>
<head>
<title>Access Count</title>
</head>
<body>
<form action="S07.php" >
Submit for session:<input type="submit"><br>
</form>
</body>
</html>

<?php
$doc = new DOMDocument();
$doc->load('Movie.xml');
$movies = $doc->getElementsByTagName("MovieInfo");
foreach ($movies as $movie) {
    echo "MovieNo: " . $movie->getElementsByTagName("MovieNo")[0]->nodeValue . ",<br> ";
    echo "MovieTitle: " . $movie->getElementsByTagName("MovieTitle")[0]->nodeValue . ",<br> ";
    echo "ActorName: " . $movie->getElementsByTagName("ActorName")[0]->nodeValue . ",<br>";
    echo "Realease Year: " . $movie->getElementsByTagName("ReleaseYear")[0]->nodeValue . ",<br>";
}
?>

Movie.xml
<?xml version="1.0" encoding="UTF-8"?>
<Movies>
    <MovieInfo>
        <MovieNo>1</MovieNo>
        <MovieTitle>The Shawshank Redemption</MovieTitle>
        <ActorName>Morgan Freeman</ActorName>
        <ReleaseYear>1994</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>2</MovieNo>
        <MovieTitle>The Godfather</MovieTitle>
        <ActorName>Marlon Brando</ActorName>
        <ReleaseYear>1972</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>3</MovieNo>
        <MovieTitle>Pulp Fiction</MovieTitle>
        <ActorName>John Travolta</ActorName>
        <ReleaseYear>1994</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>4</MovieNo>
        <MovieTitle>The Dark Knight</MovieTitle>
        <ActorName>Christian Bale</ActorName>
        <ReleaseYear>2008</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>5</MovieNo>
        <MovieTitle>Forrest Gump</MovieTitle>
        <ActorName>Tom Hanks</ActorName>
        <ReleaseYear>1994</ReleaseYear>
    </MovieInfo>
</Movies>


Q2
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

df = pd.read_csv("Market_Basket_Optimisation.csv")

t = []

df = df.sample(50)

for i in range(0, len(df)):
    t.append(
        [str(df.values[i, j]) for j in range(0, 20) if str(df.values[i, j] != "nan")]
    )

print(t)

te = TransactionEncoder()

te_array = te.fit(t).transform(t)

df = pd.DataFrame(te_array, columns=te.columns_)

print(df)

freq_items = apriori(df, min_support=0.005, use_colnames=True)

print(freq_items)

rules = association_rules(freq_items, metric="support", min_threshold=0.05)

rules = rules.sort_values(["support", "confidence"], ascending=[False, False])

print(rules)